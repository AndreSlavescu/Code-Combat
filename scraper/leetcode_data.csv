Title,Difficulty,Content
b'1. Two Sum',b'Easy',"b'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n  Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n  Constraints:\n2 <= nums.length <= 103\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.'"
b'2. Add Two Numbers',b'Medium',"b'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n  Example 1:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExample 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n  Constraints:\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.'"
b'3. Longest Substring Without Repeating Characters',b'Medium',"b'Given a string s, find the length of the longest substring without repeating characters.\n  Example 1:\nInput: s = ""abcabcbb""\nOutput: 3\nExplanation: The answer is ""abc"", with the length of 3.\nExample 2:\nInput: s = ""bbbbb""\nOutput: 1\nExplanation: The answer is ""b"", with the length of 1.\nExample 3:\nInput: s = ""pwwkew""\nOutput: 3\nExplanation: The answer is ""wke"", with the length of 3.\nNotice that the answer must be a substring, ""pwke"" is a subsequence and not a substring.\nExample 4:\nInput: s = """"\nOutput: 0\n  Constraints:\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.'"
b'4. Median of Two Sorted Arrays',b'Hard',"b'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nFollow up: The overall run time complexity should be O(log (m+n)).\n  Example 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\nExample 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\nExample 3:\nInput: nums1 = [0,0], nums2 = [0,0]\nOutput: 0.00000\nExample 4:\nInput: nums1 = [], nums2 = [1]\nOutput: 1.00000\nExample 5:\nInput: nums1 = [2], nums2 = []\nOutput: 2.00000\n  Constraints:\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106'"
b'5. Longest Palindromic Substring',b'Medium',"b'Given a string s, return the longest palindromic substring in s.\n  Example 1:\nInput: s = ""babad""\nOutput: ""bab""\nNote: ""aba"" is also a valid answer.\nExample 2:\nInput: s = ""cbbd""\nOutput: ""bb""\nExample 3:\nInput: s = ""a""\nOutput: ""a""\nExample 4:\nInput: s = ""ac""\nOutput: ""a""\n  Constraints:\n1 <= s.length <= 1000\ns consist of only digits and English letters (lower-case and/or upper-case),'"
b'6. ZigZag Conversion',b'Medium',"b'The string ""PAYPALISHIRING"" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: ""PAHNAPLSIIGYIR""\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\n  Example 1:\nInput: s = ""PAYPALISHIRING"", numRows = 3\nOutput: ""PAHNAPLSIIGYIR""\nExample 2:\nInput: s = ""PAYPALISHIRING"", numRows = 4\nOutput: ""PINALSIGYAHRPI""\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\nExample 3:\nInput: s = ""A"", numRows = 1\nOutput: ""A""\n  Constraints:\n1 <= s.length <= 1000\ns consists of English letters (lower-case and upper-case), \',\' and \'.\'.\n1 <= numRows <= 1000'"
b'7. Reverse Integer',b'Easy',"b'Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n  Example 1:\nInput: x = 123\nOutput: 321\nExample 2:\nInput: x = -123\nOutput: -321\nExample 3:\nInput: x = 120\nOutput: 21\nExample 4:\nInput: x = 0\nOutput: 0\n  Constraints:\n-231 <= x <= 231 - 1'"
b'8. String to Integer (atoi)',b'Medium',"b'Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\'s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is \'-\' or \'+\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. ""123"" -> 123, ""0032"" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\nReturn the integer as the final result.\nNote:\nOnly the space character \' \' is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n  Example 1:\nInput: str = ""42""\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: ""42"" (no characters read because there is no leading whitespace)\n         ^\nStep 2: ""42"" (no characters read because there is neither a \'-\' nor \'+\')\n         ^\nStep 3: ""42"" (""42"" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\nExample 2:\nInput: str = ""   -42""\nOutput: -42\nExplanation:\nStep 1: ""   -42"" (leading whitespace is read and ignored)\n            ^\nStep 2: ""   -42"" (\'-\' is read, so the result should be negative)\n             ^\nStep 3: ""   -42"" (""42"" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\nExample 3:\nInput: str = ""4193 with words""\nOutput: 4193\nExplanation:\nStep 1: ""4193 with words"" (no characters read because there is no leading whitespace)\n         ^\nStep 2: ""4193 with words"" (no characters read because there is neither a \'-\' nor \'+\')\n         ^\nStep 3: ""4193 with words"" (""4193"" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\nExample 4:\nInput: str = ""words and 987""\nOutput: 0\nExplanation:\nStep 1: ""words and 987"" (no characters read because there is no leading whitespace)\n         ^\nStep 2: ""words and 987"" (no characters read because there is neither a \'-\' nor \'+\')\n         ^\nStep 3: ""words and 987"" (reading stops immediately because there is a non-digit \'w\')\n         ^\nThe parsed integer is 0 because no digits were read.\nSince 0 is in the range [-231, 231 - 1], the final result is 4193.\nExample 5:\nInput: str = ""-91283472332""\nOutput: -2147483648\nExplanation:\nStep 1: ""-91283472332"" (no characters read because there is no leading whitespace)\n         ^\nStep 2: ""-91283472332"" (\'-\' is read, so the result should be negative)\n          ^\nStep 3: ""-91283472332"" (""91283472332"" is read in)\n                     ^\nThe parsed integer is -91283472332.\nSince -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648.\n  Constraints:\n0 <= s.length <= 200\ns consists of English letters (lower-case and upper-case), digits (0-9), \' \', \'+\', \'-\', and \'.\'.'"
b'9. Palindrome Number',b'Easy',"b'Given an integer x, return true if x is palindrome integer.\nAn integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.\n  Example 1:\nInput: x = 121\nOutput: true\nExample 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\nExample 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\nExample 4:\nInput: x = -101\nOutput: false\n  Constraints:\n-231 <= x <= 231 - 1\n  Follow up: Could you solve it without converting the integer to a string?'"
b'10. Regular Expression Matching',b'Hard',"b'Given an input string (s) and a pattern (p), implement regular expression matching with support for \'.\' and \'*\' where: \n\'.\' Matches any single character.\n\'*\' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).\n  Example 1:\nInput: s = ""aa"", p = ""a""\nOutput: false\nExplanation: ""a"" does not match the entire string ""aa"".\nExample 2:\nInput: s = ""aa"", p = ""a*""\nOutput: true\nExplanation: \'*\' means zero or more of the preceding element, \'a\'. Therefore, by repeating \'a\' once, it becomes ""aa"".\nExample 3:\nInput: s = ""ab"", p = "".*""\nOutput: true\nExplanation: "".*"" means ""zero or more (*) of any character (.)"".\nExample 4:\nInput: s = ""aab"", p = ""c*a*b""\nOutput: true\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches ""aab"".\nExample 5:\nInput: s = ""mississippi"", p = ""mis*is*p*.""\nOutput: false\n  Constraints:\n0 <= s.length <= 20\n0 <= p.length <= 30\ns contains only lowercase English letters.\np contains only lowercase English letters, \'.\', and \'*\'.\nIt is guaranteed for each appearance of the character \'*\', there will be a previous valid character to match.'"
b'11. Container With Most Water',b'Medium',"b'Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\nNotice that you may not slant the container.\n  Example 1:\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\nExample 2:\nInput: height = [1,1]\nOutput: 1\nExample 3:\nInput: height = [4,3,2,1,4]\nOutput: 16\nExample 4:\nInput: height = [1,2,1]\nOutput: 2\n  Constraints:\nn == height.length\n2 <= n <= 3 * 104\n0 <= height[i] <= 3 * 104'"
b'12. Integer to Roman',b'Medium',"b'Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two one\'s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.\n  Example 1:\nInput: num = 3\nOutput: ""III""\nExample 2:\nInput: num = 4\nOutput: ""IV""\nExample 3:\nInput: num = 9\nOutput: ""IX""\nExample 4:\nInput: num = 58\nOutput: ""LVIII""\nExplanation: L = 50, V = 5, III = 3.\nExample 5:\nInput: num = 1994\nOutput: ""MCMXCIV""\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n  Constraints:\n1 <= num <= 3999'"
b'13. Roman to Integer',b'Easy',"b'Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two one\'s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.\n  Example 1:\nInput: s = ""III""\nOutput: 3\nExample 2:\nInput: s = ""IV""\nOutput: 4\nExample 3:\nInput: s = ""IX""\nOutput: 9\nExample 4:\nInput: s = ""LVIII""\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\nExample 5:\nInput: s = ""MCMXCIV""\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n  Constraints:\n1 <= s.length <= 15\ns contains only the characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].'"
b'14. Longest Common Prefix',b'Easy',"b'Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string """".\n  Example 1:\nInput: strs = [""flower"",""flow"",""flight""]\nOutput: ""fl""\nExample 2:\nInput: strs = [""dog"",""racecar"",""car""]\nOutput: """"\nExplanation: There is no common prefix among the input strings.\n  Constraints:\n0 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lower-case English letters.'"
b'15. 3Sum',b'Medium',"b'Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNotice that the solution set must not contain duplicate triplets.\n  Example 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExample 2:\nInput: nums = []\nOutput: []\nExample 3:\nInput: nums = [0]\nOutput: []\n  Constraints:\n0 <= nums.length <= 3000\n-105 <= nums[i] <= 105'"
b'16. 3Sum Closest',b'Medium',"b'Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n  Example 1:\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n  Constraints:\n3 <= nums.length <= 10^3\n-10^3 <= nums[i] <= 10^3\n-10^4 <= target <= 10^4'"
b'17. Letter Combinations of a Phone Number',b'Medium',"b'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n  Example 1:\nInput: digits = ""23""\nOutput: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]\nExample 2:\nInput: digits = """"\nOutput: []\nExample 3:\nInput: digits = ""2""\nOutput: [""a"",""b"",""c""]\n  Constraints:\n0 <= digits.length <= 4\ndigits[i] is a digit in the range [\'2\', \'9\'].'"
b'18. 4Sum',b'Medium',"b'Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\nNotice that the solution set must not contain duplicate quadruplets.\n  Example 1:\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\nExample 2:\nInput: nums = [], target = 0\nOutput: []\n  Constraints:\n0 <= nums.length <= 200\n-109 <= nums[i] <= 109\n-109 <= target <= 109'"
b'19. Remove Nth Node From End of List',b'Medium',"b'Given the head of a linked list, remove the nth node from the end of the list and return its head.\nFollow up: Could you do this in one pass?\n  Example 1:\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\nExample 2:\nInput: head = [1], n = 1\nOutput: []\nExample 3:\nInput: head = [1,2], n = 1\nOutput: [1]\n  Constraints:\nThe number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz'"
b'20. Valid Parentheses',b'Easy',"b'Given a string s containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\n  Example 1:\nInput: s = ""()""\nOutput: true\nExample 2:\nInput: s = ""()[]{}""\nOutput: true\nExample 3:\nInput: s = ""(]""\nOutput: false\nExample 4:\nInput: s = ""([)]""\nOutput: false\nExample 5:\nInput: s = ""{[]}""\nOutput: true\n  Constraints:\n1 <= s.length <= 104\ns consists of parentheses only \'()[]{}\'.'"
b'21. Merge Two Sorted Lists',b'Easy',"b'Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n  Example 1:\nInput: l1 = [1,2,4], l2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\nExample 2:\nInput: l1 = [], l2 = []\nOutput: []\nExample 3:\nInput: l1 = [], l2 = [0]\nOutput: [0]\n  Constraints:\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth l1 and l2 are sorted in non-decreasing order.'"
b'22. Generate Parentheses',b'Medium',"b'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n  Example 1:\nInput: n = 3\nOutput: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]\nExample 2:\nInput: n = 1\nOutput: [""()""]\n  Constraints:\n1 <= n <= 8'"
b'23. Merge k Sorted Lists',b'Hard',"b""You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n  Example 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\nExample 2:\nInput: lists = []\nOutput: []\nExample 3:\nInput: lists = [[]]\nOutput: []\n  Constraints:\nk == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length won't exceed 10^4."""
b'24. Swap Nodes in Pairs',b'Medium',"b""Given a linked list, swap every two adjacent nodes and return its head.\n  Example 1:\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\nExample 2:\nInput: head = []\nOutput: []\nExample 3:\nInput: head = [1]\nOutput: [1]\n  Constraints:\nThe number of nodes in the list is in the range [0, 100].\n0 <= Node.val <= 100\n  Follow up: Can you solve the problem without modifying the values in the list's nodes? (i.e., Only nodes themselves may be changed.)"""
b'25. Reverse Nodes in k-Group',b'Hard',"b""Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nFollow up:\nCould you solve the problem in O(1) extra memory space?\nYou may not alter the values in the list's nodes, only nodes itself may be changed.\n  Example 1:\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\nExample 2:\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\nExample 3:\nInput: head = [1,2,3,4,5], k = 1\nOutput: [1,2,3,4,5]\nExample 4:\nInput: head = [1], k = 1\nOutput: [1]\n  Constraints:\nThe number of nodes in the list is in the range sz.\n1 <= sz <= 5000\n0 <= Node.val <= 1000\n1 <= k <= sz"""
b'26. Remove Duplicates from Sorted Array',b'Easy',"b""Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n  Example 1:\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2]\nExplanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the returned length.\nExample 2:\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4]\nExplanation: Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn't matter what values are set beyond the returned length.\n  Constraints:\n0 <= nums.length <= 3 * 104\n-104 <= nums[i] <= 104\nnums is sorted in ascending order."""
b'27. Remove Element',b'Easy',"b""Given an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n  Example 1:\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2]\nExplanation: Your function should return length = 2, with the first two elements of nums being 2.\nIt doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.\nExample 2:\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3]\nExplanation: Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.\n  Constraints:\n0 <= nums.length <= 100\n0 <= nums[i] <= 50\n0 <= val <= 100"""
b'28. Implement strStr()',b'Easy',"b'Implement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nClarification:\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\'s strstr() and Java\'s indexOf().\n  Example 1:\nInput: haystack = ""hello"", needle = ""ll""\nOutput: 2\nExample 2:\nInput: haystack = ""aaaaa"", needle = ""bba""\nOutput: -1\nExample 3:\nInput: haystack = """", needle = """"\nOutput: 0\n  Constraints:\n0 <= haystack.length, needle.length <= 5 * 104\nhaystack and needle consist of only lower-case English characters.'"
b'29. Divide Two Integers',b'Medium',"b'Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nReturn the quotient after dividing dividend by divisor.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.\nNote:\nAssume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\xe2\x88\x92231,  231 \xe2\x88\x92 1]. For this problem, assume that your function returns 231 \xe2\x88\x92 1 when the division result overflows.\n  Example 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = truncate(3.33333..) = 3.\nExample 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = truncate(-2.33333..) = -2.\nExample 3:\nInput: dividend = 0, divisor = 1\nOutput: 0\nExample 4:\nInput: dividend = 1, divisor = 1\nOutput: 1\n  Constraints:\n-231 <= dividend, divisor <= 231 - 1\ndivisor != 0'"
b'31. Next Permutation',b'Medium',"b'Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\nThe replacement must be in place and use only constant extra memory.\n  Example 1:\nInput: nums = [1,2,3]\nOutput: [1,3,2]\nExample 2:\nInput: nums = [3,2,1]\nOutput: [1,2,3]\nExample 3:\nInput: nums = [1,1,5]\nOutput: [1,5,1]\nExample 4:\nInput: nums = [1]\nOutput: [1]\n  Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 100'"
b'32. Longest Valid Parentheses',b'Hard',"b'Given a string containing just the characters \'(\' and \')\', find the length of the longest valid (well-formed) parentheses substring.\n  Example 1:\nInput: s = ""(()""\nOutput: 2\nExplanation: The longest valid parentheses substring is ""()"".\nExample 2:\nInput: s = "")()())""\nOutput: 4\nExplanation: The longest valid parentheses substring is ""()()"".\nExample 3:\nInput: s = """"\nOutput: 0\n  Constraints:\n0 <= s.length <= 3 * 104\ns[i] is \'(\', or \')\'.'"
b'33. Search in Rotated Sorted Array',b'Medium',"b'You are given an integer array nums sorted in ascending order (with distinct values), and an integer target.\nSuppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nIf target is found in the array return its index, otherwise, return -1.\n  Example 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n  Constraints:\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nAll values of nums are unique.\nnums is guaranteed to be rotated at some pivot.\n-104 <= target <= 104'"
b'34. Find First and Last Position of Element in Sorted Array',b'Medium',"b'Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nFollow up: Could you write an algorithm with O(log n) runtime complexity?\n  Example 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nExample 3:\nInput: nums = [], target = 0\nOutput: [-1,-1]\n  Constraints:\n0 <= nums.length <= 105\n-109 <= nums[i] <= 109\nnums is a non-decreasing array.\n-109 <= target <= 109'"
b'35. Search Insert Position',b'Easy',"b'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n  Example 1:\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\nExample 2:\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\nExample 3:\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\nExample 4:\nInput: nums = [1,3,5,6], target = 0\nOutput: 0\nExample 5:\nInput: nums = [1], target = 0\nOutput: 0\n  Constraints:\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums contains distinct values sorted in ascending order.\n-104 <= target <= 104'"
b'36. Valid Sudoku',b'Medium',"b'Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned rules.\n  Example 1:\nInput: board = \n[[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""]\n,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]\n,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]\n,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]\n,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]\n,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]\n,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]\n,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]\n,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]\nOutput: true\nExample 2:\nInput: board = \n[[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""]\n,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]\n,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]\n,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]\n,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]\n,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]\n,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]\n,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]\n,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\'s in the top left 3x3 sub-box, it is invalid.\n  Constraints:\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or \'.\'.'"
b'37. Sudoku Solver',b'Hard',"b'Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\nThe \'.\' character indicates empty cells.\n  Example 1:\nInput: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]\nOutput: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n  Constraints:\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or \'.\'.\nIt is guaranteed that the input board has only one solution.'"
b'38. Count and Say',b'Easy',"b'The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\ncountAndSay(1) = ""1""\ncountAndSay(n) is the way you would ""say"" the digit string from countAndSay(n-1), which is then converted into a different digit string.\nTo determine how you ""say"" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.\nFor example, the saying and conversion for digit string ""3322251"":\nGiven a positive integer n, return the nth term of the count-and-say sequence.\n  Example 1:\nInput: n = 1\nOutput: ""1""\nExplanation: This is the base case.\nExample 2:\nInput: n = 4\nOutput: ""1211""\nExplanation:\ncountAndSay(1) = ""1""\ncountAndSay(2) = say ""1"" = one 1 = ""11""\ncountAndSay(3) = say ""11"" = two 1\'s = ""21""\ncountAndSay(4) = say ""21"" = one 2 + one 1 = ""12"" + ""11"" = ""1211""\n  Constraints:\n1 <= n <= 30'"
b'39. Combination Sum',b'Medium',"b'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n  Example 1:\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\nExample 2:\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\nExample 3:\nInput: candidates = [2], target = 1\nOutput: []\nExample 4:\nInput: candidates = [1], target = 1\nOutput: [[1]]\nExample 5:\nInput: candidates = [1], target = 2\nOutput: [[1,1]]\n  Constraints:\n1 <= candidates.length <= 30\n1 <= candidates[i] <= 200\nAll elements of candidates are distinct.\n1 <= target <= 500'"
b'40. Combination Sum II',b'Medium',"b'Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\nEach number in candidates may only be used once in the combination.\nNote: The solution set must not contain duplicate combinations.\n  Example 1:\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\nExample 2:\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n  Constraints:\n1 <= candidates.length <= 100\n1 <= candidates[i] <= 50\n1 <= target <= 30'"
b'41. First Missing Positive',b'Hard',"b'Given an unsorted integer array nums, find the smallest missing positive integer.\nFollow up: Could you implement an algorithm that runs in O(n) time and uses constant extra space.?\n  Example 1:\nInput: nums = [1,2,0]\nOutput: 3\nExample 2:\nInput: nums = [3,4,-1,1]\nOutput: 2\nExample 3:\nInput: nums = [7,8,9,11,12]\nOutput: 1\n  Constraints:\n0 <= nums.length <= 300\n-231 <= nums[i] <= 231 - 1'"
b'42. Trapping Rain Water',b'Hard',"b'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n  Example 1:\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\nExample 2:\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n  Constraints:\nn == height.length\n0 <= n <= 3 * 104\n0 <= height[i] <= 105'"
b'43. Multiply Strings',b'Medium',"b'Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n  Example 1:\nInput: num1 = ""2"", num2 = ""3""\nOutput: ""6""\nExample 2:\nInput: num1 = ""123"", num2 = ""456""\nOutput: ""56088""\n  Constraints:\n1 <= num1.length, num2.length <= 200\nnum1 and num2 consist of digits only.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.'"
b'44. Wildcard Matching',b'Hard',"b'Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for \'?\' and \'*\' where:\n\'?\' Matches any single character.\n\'*\' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).\n  Example 1:\nInput: s = ""aa"", p = ""a""\nOutput: false\nExplanation: ""a"" does not match the entire string ""aa"".\nExample 2:\nInput: s = ""aa"", p = ""*""\nOutput: true\nExplanation: \'*\' matches any sequence.\nExample 3:\nInput: s = ""cb"", p = ""?a""\nOutput: false\nExplanation: \'?\' matches \'c\', but the second letter is \'a\', which does not match \'b\'.\nExample 4:\nInput: s = ""adceb"", p = ""*a*b""\nOutput: true\nExplanation: The first \'*\' matches the empty sequence, while the second \'*\' matches the substring ""dce"".\nExample 5:\nInput: s = ""acdcb"", p = ""a*c?b""\nOutput: false\n  Constraints:\n0 <= s.length, p.length <= 2000\ns contains only lowercase English letters.\np contains only lowercase English letters, \'?\' or \'*\'.'"
b'45. Jump Game II',b'Hard',"b'Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nYou can assume that you can always reach the last index.\n  Example 1:\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\nExample 2:\nInput: nums = [2,3,0,1,4]\nOutput: 2\n  Constraints:\n1 <= nums.length <= 3 * 104\n0 <= nums[i] <= 105'"
b'46. Permutations',b'Medium',"b'Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n  Example 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nExample 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\nExample 3:\nInput: nums = [1]\nOutput: [[1]]\n  Constraints:\n1 <= nums.length <= 6\n-10 <= nums[i] <= 10\nAll the integers of nums are unique.'"
b'47. Permutations II',b'Medium',"b'Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n  Example 1:\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\nExample 2:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n  Constraints:\n1 <= nums.length <= 8\n-10 <= nums[i] <= 10'"
b'48. Rotate Image',b'Medium',"b'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n  Example 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\nExample 2:\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\nExample 3:\nInput: matrix = [[1]]\nOutput: [[1]]\nExample 4:\nInput: matrix = [[1,2],[3,4]]\nOutput: [[3,1],[4,2]]\n  Constraints:\nmatrix.length == n\nmatrix[i].length == n\n1 <= n <= 20\n-1000 <= matrix[i][j] <= 1000'"
b'49. Group Anagrams',b'Medium',"b'Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n  Example 1:\nInput: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]\nOutput: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]\nExample 2:\nInput: strs = [""""]\nOutput: [[""""]]\nExample 3:\nInput: strs = [""a""]\nOutput: [[""a""]]\n  Constraints:\n1 <= strs.length <= 104\n0 <= strs[i].length <= 100\nstrs[i] consists of lower-case English letters.'"
"b'50. Pow(x, n)'",b'Medium',"b'Implement pow(x, n), which calculates x raised to the power n (i.e. xn).\n  Example 1:\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\nExample 2:\nInput: x = 2.10000, n = 3\nOutput: 9.26100\nExample 3:\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n  Constraints:\n-100.0 < x < 100.0\n-231 <= n <= 231-1\n-104 <= xn <= 104'"
